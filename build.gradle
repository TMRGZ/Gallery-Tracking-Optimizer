import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
	id 'org.springframework.boot' version '3.1.1'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'groovy'
	id 'jacoco'
	id "org.openapi.generator" version "6.6.0"
}

group = 'com.rviewer.skeletons'
version = '1.0.0'

java {
	sourceCompatibility = JavaVersion.VERSION_17
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-webflux:3.1.1'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	// Swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webflux-ui:2.1.0'
	// Map Struct
	implementation 'org.mapstruct:mapstruct:1.4.0.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.0.Final'
	// API First
	implementation 'org.openapitools:jackson-databind-nullable:0.2.4'
	// Testing
	testImplementation 'org.spockframework:spock-spring:2.4-M1-groovy-4.0'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test:3.5.6'
	testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo'
	// DB
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
}

sourceSets {
	main {
		java {
			srcDir "${buildDir}/generated/sources/src/main/java"
		}
	}
}

tasks.register('buildServer', GenerateTask) {
	generatorName = "spring"
	inputSpec = "$rootDir/api/api.spec.yaml"
	apiPackage = "com.rviewer.skeletons.infrastructure.controller"
	modelPackage = "com.rviewer.skeletons.application.model"
	outputDir = "$buildDir/generated/sources".toString()
	modelNameSuffix = "Dto"
	configOptions = [
			interfaceOnly                 : "true",
			skipDefaultInterface          : "true",
			performBeanValidation         : "true",
			useSpringBoot3                : "true",
			reactive                      : "true",
			additionalModelTypeAnnotations: "@lombok.Generated"
	]
}

tasks.compileJava.dependsOn(buildServer)

tasks.named('test') {
	useJUnitPlatform()
}

test {
	testLogging {
		events "PASSED", "SKIPPED", "FAILED"
	}
	ignoreFailures = true
	finalizedBy jacocoTestReport
}

jacoco {
	toolVersion = "0.8.8"
	reportsDirectory = file("$buildDir/reports/jacoco")
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = 	true
		html.required = true
		csv.required = 	false
	}
}

/*
************************************************************************************
************************ Task to obtain a clear test report ************************
************************************************************************************
*/
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent
tasks.withType(Test) {
	testLogging {
		events TestLogEvent.FAILED,
				TestLogEvent.PASSED

		exceptionFormat TestExceptionFormat.FULL
		showExceptions true
		showCauses true
		showStackTraces true

		debug {
			events 	TestLogEvent.FAILED,
					TestLogEvent.PASSED

			exceptionFormat TestExceptionFormat.FULL
		}
		info.events = debug.events
		info.exceptionFormat = debug.exceptionFormat

		afterSuite { desc, result ->
			if (!desc.parent) {
				def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
				def startItem = '|  ', endItem = '  |'
				def repeatLength = startItem.length() + output.length() + endItem.length()
				println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
			}
		}
	}
}